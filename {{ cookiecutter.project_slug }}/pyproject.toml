### Installation and source distribution configuration
[build-system]
requires = ["flit_core >=3.4,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "{{ cookiecutter.project_slug }}"
authors = [
    {name = "{{ cookiecutter.author }}", email = "{{ cookiecutter.email }}"},
]
description = "OTEAPI Plugin."
readme = "README.md"
license = {file = "LICENSE"}
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    # "Framework :: OTEAPI",
    "Environment :: Plugins",
    "Natural Language :: English",
    "Operating System :: OS Independent",
]
keywords = ["OTE", "OTEAPI"]
requires-python = "~=3.10"
dynamic = ["version"]

dependencies = [
    "oteapi-core ~=1.0",
]

# Other dependencies used directly in the code, but are provided by other packages:
# - pydantic (oteapi-core)

[project.optional-dependencies]
docs = [
    "mike ~=2.1",
    "mkdocs ~=1.6",
    "mkdocs-autorefs~=1.4",
    "mkdocs-awesome-pages-plugin ~=2.10",
    "mkdocs-material ~=9.6",
    "mkdocstrings[python] ~=0.30.0",
]
testing = [
    "pytest ~=8.4",
    "pytest-cov ~=6.2",
    "tomlkit ~=0.13.3",
]
dev = [
    "{{ cookiecutter.project_slug }}[docs,testing]",
    "pre-commit ~=4.2",
]

[project.urls]
Home = "{{ cookiecutter.scm_url }}"
Documentation = "https://{{ cookiecutter.username }}.github.io/{{ cookiecutter.project_slug }}"
Source = "{{ cookiecutter.scm_url }}"
"Issue Tracker" = "{{ cookiecutter.scm_url }}/issues"
Changelog = "{{ cookiecutter.scm_url }}/blob/main/CHANGELOG.md"
Package = "https://pypi.org/project/{{ cookiecutter.project_slug }}"

[project.entry-points."oteapi.download"]
# "{{ cookiecutter.package_name }}.fileDEMO" = "{{ cookiecutter.package_name }}.strategies.download:DemoFileStrategy"
[project.entry-points."oteapi.filter"]
# "{{ cookiecutter.package_name }}.filter/DEMO" = "{{ cookiecutter.package_name }}.strategies.filter:DemoFilter"
[project.entry-points."oteapi.function"]
# "{{ cookiecutter.package_name }}.function/DEMO" = "{{ cookiecutter.package_name }}.strategies.function:DemoFunctionStrategy"
[project.entry-points."oteapi.mapping"]
# "{{ cookiecutter.package_name }}.mapping/DEMO" = "{{ cookiecutter.package_name }}.strategies.mapping:DemoMappingStrategy"
[project.entry-points."oteapi.parse"]
# "{{ cookiecutter.package_name }}.application/jsonDEMO" = "{{ cookiecutter.package_name }}.strategies.parse:DemoJSONDataParseStrategy"
[project.entry-points."oteapi.resource"]
# "{{ cookiecutter.package_name }}.DEMO-access-service" = "{{ cookiecutter.package_name }}.strategies.resource:DemoResourceStrategy"
[project.entry-points."oteapi.transformation"]
# "{{ cookiecutter.package_name }}.script/DEMO" = "{{ cookiecutter.package_name }}.strategies.transformation:DummyTransformationStrategy"

[tool.flit.module]
name = "{{ cookiecutter.package_name }}"

[tool.flit.sdist]
exclude = [
    ".github/",
    "tests/",
    ".gitignore",
    ".pre-commit-config.yaml",
    ".codecov.yml",
    ".markdownlint.yaml",
]

### Dev tools configuration
[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
scripts_are_modules = true
warn_unused_configs = true
show_error_codes = true
allow_redefinition = true
check_untyped_defs = true
plugins = ["pydantic.mypy"]

[tool.ruff.lint]
extend-select = [
  "E",  # pycodestyle
  "F",  # pyflakes
  "B",  # flake8-bugbear
  "BLE",  # flake8-blind-except
  "I",  # isort
  "ARG",  # flake8-unused-arguments
  "C4",  # flake8-comprehensions
  "ICN",  # flake8-import-conventions
  "G",  # flake8-logging-format
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PL",  # pylint
  "PT",  # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "RET",  # flake8-return
  "RUF",  # Ruff-specific
  "SIM",  # flake8-simplify
  "T20",  # flake8-print
  "YTT",  # flake8-2020
  "EXE",  # flake8-executable
  "PYI",  # flake8-pyi
]
ignore = [
  "PLC",  # Convention related pylint codes
  "PLR",  # Refactor related pylint codes
]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
# "tests/**" = [
#     "B018",  # Useless attribute access
#     "B015",  # Pointless comparison
#     "BLE",  # flake8-blind-except
#     "T201",  # flake8-print
# ]

[tool.pytest.ini_options]
minversion = "8"
addopts = "-rs --cov={{ cookiecutter.package_name }} --cov-report=term-missing:skip-covered --no-cov-on-fail"
filterwarnings = [
    # Treat all warnings as errors
    "error",
]
