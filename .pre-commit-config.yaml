# To install the git pre-commit hook run:
#   pre-commit install

# pre-commit.ci
ci:
  autofix_commit_msg: |
      [pre-commit.ci] auto fixes from pre-commit hooks

      For more information, see https://pre-commit.ci
  autofix_prs: false
  autoupdate_branch: 'master'
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: 'weekly'
  skip: []
  submodules: false

# hooks
repos:
  # pre-commit-hooks supplies a multitude of small hooks
  # To get an overview of them all as well as the ones used here, please see
  # https://github.com/pre-commit/pre-commit-hooks#hooks-available
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
    - id: end-of-file-fixer
    - id: debug-statements
      exclude: ^{{ cookiecutter.project_slug }}/
    - id: check-yaml
      name: Check YAML
      exclude: ^{{ cookiecutter.project_slug }}/\.github/workflows/.*\.yml$
    - id: check-toml
      name: Check TOML
    - id: requirements-txt-fixer
      name: Fix requirements*.txt
      files: ^requirements.*\.txt$
    - id: trailing-whitespace
      args: [--markdown-linebreak-ext=md]

  # ruff is a Python linter, incl. import sorter and formatter
  # It works partly on files in-place
  # More information can be found in its documentation:
  # https://docs.astral.sh/ruff/
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.11.4
    hooks:
      - id: ruff
        args: ["--fix", "--exit-non-zero-on-fix"]
        exclude: ^{{ cookiecutter.project_slug }}/

  # Black is a code style and formatter
  # It works on files in-place
  - repo: https://github.com/psf/black
    rev: 25.1.0
    hooks:
    - id: black
      exclude: ^{{ cookiecutter.project_slug }}/

  # Bandit is a security linter
  # More information can be found in its documentation:
  # https://bandit.readthedocs.io/en/latest/
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.3
    hooks:
    - id: bandit
      args: ["-r"]
      exclude: ^{{ cookiecutter.project_slug }}/

  # mypy is a static typing linter
  # The main code repository can be found at:
  # https://github.com/python/mypy
  # The project's documentation can be found at:
  # https://mypy.readthedocs.io/en/stable/index.html
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.15.0
    hooks:
    - id: mypy
      exclude: ^{{ cookiecutter.project_slug }}/

  # ci-cd is a collection of hooks to help with CI/CD
  # The main code repository can be found at:
  # https://github.com/SINTEF/ci-cd
  # The project's documentation can be found at:
  # https://SINTEF.github.io/ci-cd/
  - repo: https://github.com/SINTEF/ci-cd
    rev: v2.9.2
    hooks:
    - id: docs-api-reference
      args:
      - "--root-repo-path={{ cookiecutter.project_slug }}"
      - "--package-dir={{ cookiecutter.package_name }}"
      - "--docs-folder=docs"
      - "--full-docs-folder=strategies"
    - id: docs-landing-page
      files: ^{{ cookiecutter.project_slug }}/README.md$
      args:
      - "--root-repo-path={{ cookiecutter.project_slug }}"
      - "--docs-folder=docs"
      - "--replacement-separator=,"
      - "--replacement=(LICENSE),(LICENSE.md)"
      - "--replacement=(docker-compose.yml),({{ cookiecutter.scm_url }}/blob/main/docker-compose.yml)"
      - "--replacement=(setup.cfg),({{ cookiecutter.scm_url }}/blob/main/setup.cfg)"
    - id: update-pyproject
      stages: [manual]
      verbose: true
      args:
      - "--root-repo-path={{ cookiecutter.project_slug }}"
      - "--ignore=dependency-name=oteapi-core...versions=>=1"
      - "--skip-unnormalized-python-package-names"
